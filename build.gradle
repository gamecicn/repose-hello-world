buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://maven.research.rackspacecloud.com/content/groups/aggregate/"
        }
    }

    dependencies {
        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.2.0'
        classpath 'com.netflix.nebula:nebula-dependency-recommender:3.3.0'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.0.3'
        classpath 'org.openrepose:gradle-jaxb-plugin:2.2.1'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.1'
    }
}

allprojects {
    group = 'org.openrepose.filters.custom'
    version = "1.0-SNAPSHOT"

    apply plugin: 'idea'
    apply plugin: 'nebula.dependency-recommender'

    repositories {
        mavenCentral()
        maven {
            url "https://maven.research.rackspacecloud.com/content/groups/aggregate/"
        }
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'scala'
    apply plugin: 'kotlin'
    apply plugin: 'org.unbroken-dome.test-sets'
    apply plugin: 'nebula.provided-base'
    apply plugin: 'org.openrepose.gradle.plugins.jaxb'

    dependencies {
        jaxb "com.sun.xml.bind:jaxb-xjc"
        jaxb "com.sun.xml.bind:jaxb-impl"
        jaxb "javax.xml.bind:jaxb-api"
        jaxb "org.jvnet.jaxb2_commons:jaxb2-basics-ant"

        provided "org.openrepose:core-lib"
        provided "org.openrepose:core-service-api"
        provided "org.openrepose:utilities"

        compile "org.jvnet.jaxb2_commons:jaxb2-basics-runtime"

        testCompile "junit:junit"
        testCompile "org.springframework:spring-test"
        testCompile "org.mockito:mockito-all"
        testCompile "org.apache.logging.log4j:log4j-core"
        testCompile group: 'org.apache.logging.log4j', name: 'log4j-core', classifier: 'tests'
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task transformXSDs() {
        description "Runs xml through an xslt transfurm"
        ext.outputDir = "$buildDir/src/generated-xsd"
        //todo: make this work with multiples so I can make these paths better
        def xsltFile = "$rootDir/remove-1.1-elements.xsl"
        def schemaBaseDir = "$projectDir/src/main/resources/META-INF/schema"

        //If they set a property for the jaxbXSLT file override our default
        if (project.hasProperty('jaxbXsltFile')) {
            xsltFile = project.jaxbXsltFile
        }

        if (project.hasProperty('jaxbSchemaBase')) {
            schemaBaseDir = project.jaxbSchemaBase
        }

        inputs.files(
                fileTree(dir: schemaBaseDir, includes: ["**/*.xsd", "**/*.xjb"]),
                file(xsltFile)
        )
        outputs.dir outputDir

        doLast {
            file(outputDir).mkdirs()

            //Find all XSDs in the src/main/resources/META-INF.schema
            if (file(xsltFile).exists() && file(schemaBaseDir).exists()) {
                logger.lifecycle("Transforming Schemas")
                ant.xslt(
                        extension: '.xsd',
                        basedir: schemaBaseDir,
                        includes: "**/*.xsd",
                        style: xsltFile,
                        destdir: "${outputDir}"
                )
            } else {
                logger.lifecycle("NOT Transforming Schemas")
                copy {
                    from schemaBaseDir
                    into outputDir
                    include "**/*.xsd"
                }
            }

            //Copy over any bindings.xjb into their appropriate directories
            logger.lifecycle("Copying xjb's")
            copy {
                from schemaBaseDir
                into outputDir
                include "**/*.xjb"
            }
        }
    }

    def generatedDir = "${buildDir}/src/generated-sources"

    jaxb {
        xsdDir transformXSDs.outputDir
        bindingsDir = transformXSDs.outputDir
        xjc {
            destinationDir = generatedDir
        }
    }

    xjc.dependsOn transformXSDs

    sourceSets {
        generated {
            java {
                srcDirs += generatedDir
            }
        }
        main {
            java {
                compileClasspath += generated.output
                runtimeClasspath += generated.output
            }
            output.dir(sourceSets.generated.output.classesDir, builtBy: 'compileGeneratedJava')
        }
    }

    [JavaCompile, ScalaCompile, GroovyCompile].collect { type ->
        tasks.withType(type) {
            dependsOn('xjc')
        }
    }

    configurations {
        compile.exclude group: 'commons-logging', module: 'commons-logging'

        testCompile.exclude group: 'xerces', module: 'xerces'
    }

    //todo: remove this once gradle fixes the bug with zinc compiler inference
    //https://discuss.gradle.org/t/default-scala-compilation-doesnt-work-in-gradle-2-12/15328
    tasks.withType(ScalaCompile) {
        scalaCompileOptions.with {
            useAnt = true
        }
    }

    jar {
        manifest {
            attributes(
                    "Specification-Title": "Repose Components - $project.name",
                    "Specification-Vendor": "Rackspace US, Inc.",
                    "Specification-Version": version,
                    "Implementation-Title": "Repose Components - $project.name",
                    "Implementation-Version": version,
                    "Implementation-Vendor": "Rackspace US, Inc.",
                    "Implementation-Vendor-Id": project.group,
                    "Built-By": System.getProperty('user.name'),
                    "Build-Jdk": org.gradle.internal.jvm.Jvm.current(),
                    "Created-By": "Gradle $project.gradle.gradleVersion",
            )
        }
    }
}

dependencyRecommendations {
    propertiesFile file: file('versions.properties')
}
